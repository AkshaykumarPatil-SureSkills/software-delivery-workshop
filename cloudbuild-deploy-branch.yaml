steps:
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/helloworld:${BRANCH_NAME}-${SHORT_SHA}'
      - '.'
  - name: 'gcr.io/cloud-builders/kubectl'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        CLUSTER=$$(gcloud config get-value container/cluster)
        PROJECT=$$(gcloud config get-value core/project)
        ZONE=$$(gcloud config get-value compute/zone)
      
        gcloud container clusters get-credentials "$${CLUSTER}" \
          --project "$${PROJECT}" \
          --zone "$${ZONE}"


        kubectl get ns ${BRANCH_NAME} || kubectl create ns ${BRANCH_NAME}

        cat <<EOF > patch.yaml
          spec:
            template:
              spec:
                containers:
                  - name: helloworld
                    image: gcr.io/${PROJECT_ID}/helloworld:${BRANCH_NAME}-${SHORT_SHA}
        EOF
        kubectl patch --local -o yaml \
          -f kubernetes/deployments/helloworld.yaml \
          -p "$(cat patch.yaml)" \
          > helloworld.yaml
        mv helloworld.yaml kubernetes/deployments/helloworld.yaml

    volumes:
      - name: 'kube'
        path: /kube

  
# Apply the Kubernetes configuration files.
  - name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'KUBECONFIG=/kube/config'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        kubectl apply --recursive -f kubernetes
    volumes:
      - name: 'kube'
        path: /kube